/**
 * Copyright (C) 2016 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
use String, Mongo, Document, Collection, Cmis;


/** Provide a default if the argument is null **/
function nullValue(arg, whenNull) {
    if(arg == null) {
        return whenNull;
    } else {
        return arg;
    }
}


/** Provide a value when the argument is null and when is not null **/
function nullValue2(arg, whenNull, whenNotNull) {
    if(arg == null) {
        return whenNull;
    }
    return whenNotNull;
}


/** Provide a default if the argument is empty **/
function emptyValue(arg, whenEmpty) {
    if(String.trim(arg) == "") {
        return whenEmpty;
    }
    return arg;
}


/** Returns the first non null passed value **/
function coalesce(args) {
    foreach(v in args) {
        if(v != null) {
            return v;
        }
    }
}


/** Appends to the target OBJECT the given element with the specified value only if the value exists **/
function appendWhenNotNull(target, element, value) {
    if(value != null) {
        target += {
            element: value
        };
    }
    return target;
}


/** Gets the member specified as an list of members to navigate from the root provided.
    If any null is found null is returned.
**/
function get(object, pathArray, default) {
    if(object == null) {
        return default;
    }
    
    var node = object;
    foreach(s in pathArray) {
        node = node[s];
        if(node == null) {
            return default;
        }
    }
    
    return node;
}


/** Returns true if the passed variable is null or evaluates to empty string **/
function isEmpty(variable) {
    return variable == null || variable == "";
}


function setFolderStatistics(dbName, identity, folderContentType){
    var database = Mongo.connect(dbName);
    var records = Mongo.find("documents", {"contentType": folderContentType}, {},{},{}, database);
    foreach(record in records){
        var path = String.replace(record.source.current.folder.path, "([\\\\_])", "\\\\$1");
        var folderCount = Mongo.count("documents", {
            "contentType": folderContentType, 
            "source.current.parent.path": {"$regex": path :: ".*"}
        }, database);
        var fileCount = Mongo.count("documents", {
            "contentType": {"$ne" : folderContentType}, 
            "source.current.parent.path": {"$regex": path :: ".*"}
        }, database);
        
        var document = Document.get(record._id, identity);
        document.source.current.folderStatistics.folderCount = folderCount;
        document.source.current.folderStatistics.fileCount = fileCount;
        document.target.current.folderStatistics.folderCount = folderCount;
        document.target.current.folderStatistics.fileCount = fileCount;
        
        Document.save (document, identity);
    }
}


/**
* Clears the documents collection in the Mongo database
*/
function clearDocuments(database) {
    Mongo.drop("documents", database);
}