/**
 * Copyright (C) 2016 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Project: Mapper
 * Author: Titus Nachbauer, Ernst van Rheenen, Sander Visser
 * Date: 2016-06-23
 *
 * which will include all mapping scripts it can find in all subfolders named 'mappings'
 * and runs the appropriate script based on the provided ContentType.
 */

use System, Stream, File, String, Assert, Collection, Template, Properties;

include lib.util.AllUtil;

//-------------------------------------------------------------------------
//						  MAIN
//-------------------------------------------------------------------------

build();

//-------------------------------------------------------------------------
//						  FUNCTIONS
//-------------------------------------------------------------------------

function build() {
    var configFilePath = Properties.get("mapper.config.file.path");
    if(!File.isFile(configFilePath)) {
        System.print("Mapper library configuration file not found at: " :: configFilePath, "ERROR");
        return;
    }
    
    System.print("Found mapping configuration at: " :: configFilePath);
    
    var configurations = System.parseJSON(Stream.getText(File.openRead(configFilePath)));
    
    if(System.typeOf(configurations) == OBJECT) {
        configurations = [configurations];
    }
    
    foreach(config in configurations) {
        parseConfiguration(config, configFilePath);
        buildMapper(config);
    }
}

private function parseConfiguration(configuration, configFilePath) {
    
    // Default the baseFolder to the config file's parentFolder
    if(!configuration.baseFolder) {
        configuration.baseFolder = pathToParent(configFilePath);
    }
    
    // Check if a mapper robot it provided
    if(!configuration.mapperRobot) {
        Assert.error("No mapperRobot was provided!\n" :: System.toJSON(configuration, true));
    }
}

private function buildMapper(configuration) {
    var mappings = getMappings(configuration.baseFolder);
    generateMapper(mappings, configuration.mapperRobot);
}

/**
 * Returns any robots it can find starting from the baseFolder;
 */
private function getMappings(baseFolder) {
    do {
        var files = collect(filter<isXillFile>(File.iterateFiles(baseFolder, false)));
        if (Collection.length(files) == 0) {
            Assert.error("No mapping robots found in project.");
        }
        return files;
    } fail (error) {
        System.print(
            "Error getting mapping robots \n" ::
            "Message: " :: error.message :: "\n" ::
            "In robot: " :: error.robot :: "\n" ::
            "At line: " :: error.line,
            "warning");
    }
}

/**
* Generate a main mapping robot based on the provided mappings and save it
* at the rootFolder/config/
*/
private function generateMapper(mappings, targetMapperRobot) {
    System.print("Generating Mapper: " :: targetMapperRobot);
    var includeStatements = "";
    var ifStatements = "";
    var typeStatements = "";
    foreach (mapping in mappings) {
        includeStatements = addIncludeStatement(includeStatements, mapping);
        ifStatements = addIfStatement(ifStatements, mapping);
        typeStatements = addTypeStatement(typeStatements, mapping);
    }

    var model = {
        "includes" : includeStatements,
        "switch" : ifStatements,
        "types" : typeStatements
    };

    var outputStream = File.openWrite(targetMapperRobot);
    Template.process(Properties.get("mapper.template.path"), outputStream, model);
}

/**
* Adds an include-statement for current mapping to the input string.
*/
private function addIncludeStatement(includeStatements, mapping) {
    var newInclude = "include " :: getMappingFQName(mapping) :: " as " :: getQualifiedName(mapping) ::";\n";

    return includeStatements :: newInclude;
}

/**
* Adds an if-statement (switch) for mapping to the input string.
*/
private function addIfStatement(ifStatements, mapping) {
    var newIf = "";
    if (ifStatements == "") {
        newIf = "	if ";
    } else {
        newIf = "	else if ";
    }
    newIf = newIf :: "(contentType == \"" :: getMappingName (mapping) :: "\") {" ::
        getMapBlock(getMappingName(mapping)) :: "
    }";
    return ifStatements :: newIf;
}

private function getMapBlock(contentType) {
    var block = "
        var parentContentType = __CONTENTTYPE__->getParentTemplate();
        if(parentContentType != null && parentContentType != \"\") {
            foreach(type in parentContentType) {
                var parent = mapObject(object, type);
                result += __CONTENTTYPE__->mapObject(parent, object);
            }
        } else {
            result = __CONTENTTYPE__->mapObject({}, object);
        }";
    return String.replace(block, "__CONTENTTYPE__", contentType, false);
}

private function addTypeStatement(typeStatements, mapping) {
    return typeStatements :: getTypeMappingBlock(mapping);
}

private function getTypeMappingBlock(contentType) {
    contentType = getMappingName(contentType);
    var block = "
        targetType = matchTargetType(__CONTENTTYPE__->getSourceType(context), type, \"__CONTENTTYPE__\");
        if (targetType != null) { return targetType; }
        ";
    return String.replace(block, "__CONTENTTYPE__", contentType, false);
}
/**
* Returns the checksum stored in the currently generated mapping bot or null if there is no mapping bot yet.
*/
private function getMappingChecksum(mapperPath) {
    var result = null;
    if (File.exists(mapperPath)) {
        var text = Stream.getText(File.openRead(mapperPath));
        result = String.replace(text, ".*// Checksum: ([0-9,a-f]{32}).*", "$1");
    }
    return result;
}

/**
* Returns the name of the mapping, assuming it is a path to a .xill mapping robot,
* which has the mapped contentType as file name using the correct casing.
*/
function getMappingName(mapping) {
    return toUpperCamelCase(String.replace(mapping, ".*[/\\\\]([^/\\\\]*?)\\.xill", "$1"));
}

/**
* Returns a call to a standardized mapping function with the ContentType of the current mapping
*/
function getMappingFunction(mapping) {
    return "map" :: getMappingName(mapping) :: "(object)";
}

/**
* Returns the fully qualified path used to include mapping.
*/
function getMappingFQName(mapping) {
    var searchString = normalizeSlashes(System.info().projectPath) :: "/(.*)\\.xill";
    var relativePath = (String.replace(normalizeSlashes(mapping), searchString, "$1"));
    return (String.replace (relativePath, "[/\\\\]", "."));
}

/**
* Returns the name for the include of a mapper
*/
function getQualifiedName(mapping){
    var splitPackage = String.split(mapping,"[\\\\/]");
    var indexOfName = Collection.length(splitPackage)-1;
    var lengthWithoutXill = String.length(mapping)-5;
    var path = String.substring(mapping,0,lengthWithoutXill);
    var qualifiedName= String.split(path,"[\\\\/]")[indexOfName];
    return qualifiedName;
}