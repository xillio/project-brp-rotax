/**
 * Copyright (C) 2016 Xillio (support@xillio.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Project: Mapper
 * Author: Titus Nachbauer, Ernst van Rheenen
 * Date: 2016-06-27
 *
 * Mapper.xill
 * This file was automatically generated by: lib.mapper.Build.xill
 *
 * DO NOT MAKE MANUAL CHANGES TO THIS FILE
 */

use System, String, Collection, Assert;

${includes}

//-------------------------------------------------------------------------
//						  FUNCTIONS
//-------------------------------------------------------------------------

/**
 * Call this function to map an object to the specified ContentType. The function relays the request to
 * the appropriate mapping file as found during the build process.
 * Arguments:
 *   data: The data variable that needs to be converted. Typically an object, but can really be anything
 *   contentType: Name of the target content type
 * Returns:
 * The converted object
 */
function mapObject(object, contentType) {
    var result = {};
${switch}
	else {
		Assert.error("Unsupported contentType: " :: contentType);
	}
    return result;
}

/**
* Call this function to translate a source content type to a target content type. The function relays
* the request to the appropriate mapping file as found during the build process.
* Arguments:
*   contentType: The name of the source content type
*   context: Any context you want to provide to your mapping files
* Returns:
* The name of the target content type
*/
function mapSourceToTargetType(contentType, context) {
	foreach(type in [contentType, "DEFAULT"]) {
		var targetType = null;
${types}
	}
	Assert.error("No template match found for contentType: " :: contentType);
}

private function matchTargetType(sourceType, typeToMatch, targetType) {
	if (sourceType != null && (sourceType == typeToMatch || (System.typeOf(sourceType) == "LIST" && Collection.contains(sourceType, typeToMatch)))) {
		return targetType;
	}
}